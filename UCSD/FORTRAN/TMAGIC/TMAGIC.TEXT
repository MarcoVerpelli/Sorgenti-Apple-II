* Programma per testare la subroutine magic
      PROGRAM TMAGIC
      INTEGER M(19,19)
10    WRITE (*,'(A,''Enter order (3-19) -> ''$)') CHAR(12)
      READ (*,'(BN,I2)') N
      IF ((N.LT.3).OR.(N.GT.19)) GOTO 10
      CALL MAGIC(M,N)
      CALL PMAGIC(M,N)
      END

* Subroutine per stampare il quadrato magico
      SUBROUTINE PMAGIC(A,N)
      INTEGER A(N,N)
      CHARACTER*6 FMTCHR
      WRITE (FMTCHR,'(''('',I2,''I'',I1,'')'')') N,INT(ALOG10(N**2.0))+2
      WRITE (*,FMTCHR) ((A(I,J),J=1,N),I=1,N)
      RETURN
      END

* Versione modificata di dswap.f del pacchetto OpenBLAS
*     interchanges two vectors.
*     used unrolled loops for increments equal one.
      SUBROUTINE SWAP(N,X,Y)
*     .. Scalar Arguments ..
      INTEGER N
*     .. Array Arguments ..
      INTEGER X(*),Y(*)
*     .. Local Scalars..
      INTEGER TEMP
      INTEGER I,IX,IY,M,MP1
*     ..
*     .. Intrinsic Functions ..
      INTRINSIC MOD
*
*    code for both increments equal to 1
*
*
*    clean-up loop
*
      M = MOD(N,3)
      IF (M.NE.0) THEN
         DO 10,I = 1,M
            TEMP = X(I)
            X(I) = Y(I)
            Y(I) = TEMP
10       CONTINUE
         IF (N.LT.3) RETURN
      END IF
      MP1 = M + 1
      DO 20,I = MP1,N,3
         TEMP = X(I)
         X(I) = Y(I)
         Y(I) = TEMP
         TEMP = X(I+1)
         X(I+1) = Y(I+1)
         Y(I+1) = TEMP
         TEMP = X(I+2)
         X(I+2) = Y(I+2)
         Y(I+2) = TEMP
20    CONTINUE
      RETURN
      END

c Versione modificata di magic.f del pacchetto Scilab
      subroutine magic(a,n)
c     algorithms for magic squares taken from
c        Mathematical recreations and essays, 12th ed.,
c        by W. W. Rouse Ball and H. S. M. Coxeter
      integer a(n,n),t
c
      if (mod(n,4) .eq. 0) go to 100
      if (mod(n,2) .eq. 0) m = n/2
      if (mod(n,2) .ne. 0) m = n
c
c     odd order or upper corner of even order
c
      do 20 j = 1,m
         do 10 i = 1,m
            a(i,j) = 0
10       continue
20    continue
      i = 1
      j = (m+1)/2
      mm = m*m
      do 40 k = 1, mm
         a(i,j) = k
         i1 = i-1
         j1 = j+1
         if(i1.lt.1) i1 = m
         if(j1.gt.m) j1 = 1
         if(a(i1,j1).eq.0) go to 30
            i1 = i+1
            j1 = j
30          i = i1
         j = j1
40    continue
c
c     rest of even order
c
      if (mod(n,2) .ne. 0) return
      t = m*m
      do 60 i = 1, m
         do 50 j = 1, m
            im = i+m
            jm = j+m
            a(i,jm) = a(i,j) + 2*t
            a(im,j) = a(i,j) + 3*t
            a(im,jm) = a(i,j) + t
50       continue
60    continue
      m1 = (m-1)/2
      if (m1.eq.0) return
      do 70 j = 1, m1
         call swap(m,a(1,j),a(m+1,j))
70    continue
      m1 = (m+1)/2
      m2 = m1 + m
      call swap(1,a(m1,1),a(m2,1))
      call swap(1,a(m1,m1),a(m2,m1))
      m1 = n+1-(m-3)/2
      if(m1.gt.n) return
      do 80 j = m1, n
         call swap(m,a(1,j),a(m+1,j))
80    continue
      return
c
c     double even order
c
100   k = 1
      do 120 i = 1, n
         do 110 j = 1, n
            a(i,j) = k
            if (mod(i,4)/2 .eq. mod(j,4)/2) a(i,j) = n*n+1 - k
            k = k+1
110      continue
120   continue
      return
      end
